module Wowsv
  grammar WowLua

    rule WowLua
      element_value
    end

    rule table
      space* '{' space* element:element_value more_elements:(',' space* element_value)* space* ',' space* '}' space* {
        def to_ruby(*args)
          temparray = [element.to_ruby] + more_elements.elements.map { |x| x.element_value.to_ruby }
          # return LuaObjectParser.splash_array(temparray)    
          temparray    
        end
      }
    end

    rule assignation
      space* key space_no_newline* '=' space* value  space* {
        def to_ruby
          hsh = { key.to_ruby => value.to_ruby }
          def hsh.intermediate_hash?
            true
          end
          hsh
        end
      }
    end

    rule value
      nil / float / number / string / table / boolean
    end

    rule nil
      'nil' { def to_ruby; nil; end }
    end



    rule element_value
      assignation / value
    end

    rule key
      word / '[' space* value space* ']' {
        def to_ruby
          value.to_ruby
        end
      }
    end

    rule comment
      space_no_newline* '--' (!"\n" .)*
    end

    rule float
      [0-9]+ '.' [0-9]+ { def to_ruby; text_value.to_f; end }
    end

    rule number
      [0-9]+ {
        def to_ruby
          text_value.to_i
        end
      }
    end

    rule string
      '"' (!'"' . / '\"')* '"' {
        def to_ruby
          text_value[1..-2]
        end
      }
    end

    rule boolean
      true / false
    end

    rule true
      'true' {
        def to_ruby
          true
        end
      }
    end

    rule false
      'false' {
        def to_ruby
          false
        end
      }
    end

    rule word
      [A-Za-z_]+ {
        def to_ruby
          text_value
        end
      }
    end

    rule space_no_newline
      [ \t\r]
    end

    rule space
      space_no_newline / comment / "\n"
    end  
  end
end